APPLICATIVE INSTANCE FOR COFREE TRANSFORMER

If the underlying functor f is an instance of Alternative, then CofreeT is also
an applicative functor.

Note that the only required properties of Alternative are associativity and
existence of an identity element, so one could also use functors that are
instances of Plus (semigroupoid package).

> instance (Alternative f, Monad w) => Monad (CofreeT f w) where
>   return = CofreeT . return . (:< empty)
>   (CofreeT cx) >>= f = CofreeT $ do
>     (a :< m) <- cx
>     (b :< n) <- runCofreeT $ f a
>     return $ b :< (n <|> fmap (>>= f) m)
> 
> instance (Alternative f, Applicative w) =>
>          Applicative (CofreeT f w) where
>   pure = CofreeT . pure . (:< empty)
>   
>   (CofreeT wf) <*> aa@(CofreeT wa) = CofreeT $
>     ( \(f :< t) -> 
>       \(a)      ->  
>       let (b :< n) = bimap f (fmap f) a in 
>       b :< (n <|> fmap (<*> aa) t)) <$> wf <*> wa


    C $
      ( \(f :< t) -> 
        \(a)      ->  
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> aa) t)) <$> wf <*> wa


## Identity

  pure id <*> (C wa)

==

   C $
     ( \(f :< t) -> 
       \(a)      ->  
       let (b :< n) = bimap f (fmap f) a in 
       b :< (n <|> fmap (<*> C wa) t)) <$> (pure $ id :< empty) <*> wa

== { w is Applicative } ==
  
  C $
       \(a)      ->  
       let (b :< n) = bimap id (fmap id) a in 
       b :< (n <|> fmap (<*> C wa) empty)) <$> wa

== { functor preserves identity } ==

  C $
       \(a)      ->  
       let (b :< n) = bimap id id a in 
       b :< (n <|> fmap (<*> C wa) empty)) <$> wa

== { bifunctors preserve identity } ==

  C $
       \(a)      ->  
       let (b :< n) = a in 
       b :< (n <|> fmap (<*> C wa) empty)) <$> wa

== { empty is invariant under fmap } == 
 
  C $
       \(a)      ->  
       let (b :< n) = a in 
       b :< (n <|> empty) <$> wa

== 

  C $ id <$> wa

== { functor preserves identity }

  C wa

---


## Composition

   pure (.) <*> C u <*> C v <*> C w

==
    (C $
      ( \(f :< t) -> 
        \(a)      ->  
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> (C u)) t)) <$> pure ((.) :< empty) <*> u) <*> C v <*> C w

== { w is Applicative } ==

    (C $
       pure (\(a)      ->  
        let (b :< n) = bimap (.) (fmap (.)) a in 
        b :< (n <|> fmap (<*> (C u)) empty)) <*> u) <*> C v <*> C w

== { empty invariant under fmap } == 

    (C $
       pure (\(a)      ->  
        let (b :< n) = bimap (.) (fmap (.)) a in 
        b :< (n <|> empty)) <*> u) <*> C v <*> C w

== { empty is identity } ==

    (C $
       pure (\(a)      ->  
        let (b :< n) = bimap (.) (fmap (.)) a in 
        b :< n) <*> u) <*> C v <*> C w

== { η equivalence } ==

    (C $ (bimap (.) (fmap (.)) <$> u) <*> C v <*> C w

== { definition of (<*>) ==

    (C $  
      ( \(f :< t) -> 
        \(a)      ->  
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> (C v)) t)) <$> 
          (bimap (.) (fmap (.))) <$> u <*> v) <*> C w

== { η-equivalence } ==

    (C $  
      ( \fc -> 
        \(a)      ->  
        let (f :< t) = fc in
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> (C v)) t)) <$> 
          (bimap (.) (fmap (.))) <$> u <*> v) <*> C w


== { fmap respects composition for w } ==

    (C $  
      ( \hc -> 
        \(a)      ->  
        let (f :< t) = bimap (.) (fmap (.)) hc in
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> (C v)) t)) <$> u <*> v) <*> C w

== { single constructor for CofreeF } ==

    (C $  
      ( \h :< s -> 
        \(a)      ->  
        let (f :< t) = bimap (.) (fmap (.)) (h :< s) in
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> (C v)) t)) <$> u <*> v) <*> C w

== { definition of bimap } ==

    (C $  
      ( \h :< s -> 
        \(a)      ->  
        let (f :< t) = (h .) :< (fmap (fmap (.)) s) in
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> (C v)) t)) <$> u <*> v) <*> C w


== { β-equivalence } ==

    (C $  
      ( \h :< s -> 
        \g :< r ->  
        let (b :< n) = bimap (h .) (fmap (h .)) (g :< r) in 
        b :< (n <|> fmap (<*> (C v)) (fmap (fmap (.)) s)) <$> u <*> v) <*> C w

== { definition of bimap } 

    (C $  
      ( \h :< s -> 
        \g :< r ->  
        let (b :< n) = (h . g) :< (fmap (fmap (h .)) r) in 
        b :< (n <|> fmap (<*> (C v)) (fmap (fmap (.)) s)) <$> u <*> v) <*> C w

== { β-equivalence } ==

    (C $  
      ( \h :< s -> 
        \g :< r ->  
        (h . g) :< (fmap (fmap (h .)) r) <|> 
                    fmap (<*> (C v)) (fmap (fmap (.)) s)) <$> u <*> v) <*> C w

== { fmap distributes over composition } =

    (C $  
      ( \h :< s -> 
        \g :< r ->  
        (h . g) :< (fmap (fmap (h .)) r) <|> 
                    fmap (<*> (C v)) . (fmap (.)) s)) <$> u <*> v) <*> C w


== { definition of <*> } ==  

    C $
      
      (\(f :< t) -> 
        \(a)      ->  
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> C w) t))   

      <$>
     
      (( \h :< s -> 
         \g :< r ->  
         (h . g) :< (fmap (fmap (h .)) r) <|> 
                     fmap (<*> (C v)) . (fmap (.)) s) <$> u <*> v) <*> w

== { pattern match on CofreeF } ==

    C $
      
      (\(f :< t) -> 
       \(i :< p) ->  
        let (b :< n) = bimap f (fmap f) (i :< p) in 
        b :< (n <|> fmap (<*> C w) t))   

      <$>
     
      (( \h :< s -> 
         \g :< r ->  
         (h . g) :< (fmap (fmap (h .)) r) <|> 
                     fmap (<*> (C v)) . (fmap (.)) s) <$> u <*> v) <*> w

== { definition of bimap } ==

    C $
      
      (\(f :< t) -> 
       \(i :< p) ->  
        let (b :< n) = (f i) :< fmap (fmap f) p) in 
        b :< (n <|> fmap (<*> C w) t))   

      <$>
     
      (( \h :< s -> 
         \g :< r ->  
         (h . g) :< (fmap (fmap (h .)) r) <|> 
                     fmap (<*> (C v)) . (fmap (.)) s) <$> u <*> v) <*> w


== { β-equivalence } ==

    C $
      
      (\(f :< t) -> 
       \(i :< p) ->  
        (f i) :< (fmap (fmap f) p <|> fmap (<*> C w) t))   

      <$>
     
      (( \h :< s -> 
         \g :< r ->  
         (h . g) :< (fmap (fmap (h .)) r <|> 
                     fmap ((<*> (C v)) . (fmap (.))) s)) <$> u <*> v) <*> w

== { (f <$>) == ((pure f) <*>) for w Applicative } ==

    C $
      
    ((pure (\(f :< t) -> 
            \(i :< p) ->  
             (f i) :< (fmap (fmap f) p <|> fmap (<*> C w) t)))

      <*>
     
      (pure ( \h :< s -> 
               \g :< r ->  
               (h . g) :< (fmap (fmap (h .)) r) <|> 
                           fmap ((<*> (C v)) . (fmap (.))) s) <*> u <*> v) <*> w

== { <*> left associative } ==

    C $
      
    (pure (\(f :< t) -> 
            \(i :< p) ->  
             (f i) :< (fmap (fmap f) p <|> fmap (<*> C w) t)))

      <*>
     
      ((pure ( \h :< s -> 
               \g :< r ->  
               (h . g) :< (fmap (fmap (h .)) r) <|> 
                           fmap ((<*> (C v)) . (fmap (.))) s) <*> u) <*> v) <*> w

== { composition law for <*> for w Applicative } ==

    C $
    
    (pure (.) <*>
   
     pure (\(f :< t) -> 
           \(i :< p) ->  
           (f i) :< (fmap (fmap f) p <|> fmap (<*> C w) t))

      <*>
     
      (pure ( \h :< s -> 
               \g :< r ->  
               (h . g) :< (fmap (fmap (h .)) r) <|> 
                           fmap (<*> (C v)) . (fmap (.)) s) <*> u) <*> v) <*> w

== { <*> is left associative } ==

    C $
    
    ((pure (.) <*>
   
     pure (\(f :< t) -> 
           \(i :< p) ->  
           (f i) :< (fmap (fmap f) p <|> fmap (<*> C w) t)))

      <*>
     
      (pure ( \h :< s -> 
               \g :< r ->  
               (h . g) :< (fmap (fmap (h .)) r) <|> 
                           fmap (<*> (C v)) . (fmap (.)) s) <*> u)) <*> v) <*> w

== { composition law for <*> } ==

   ((pure (.) <*>

     ((pure (.) <*>
   
      pure (\(f :< t) -> 
            \(i :< p) ->  
            (f i) :< (fmap (fmap f) p <|> fmap (<*> C w) t))))

      <*>
     
         pure ( \h :< s -> 
                \g :< r ->  
                (h . g) :< (fmap (fmap (h .)) r) <|> 
                            fmap (<*> (C v)) . (fmap (.)) s) <*> u) <*> v) <*> w

== { composition law for <*> }

  ((pure (.) <*>

    pure (.) <*>

      pure (.) <*>
   
        pure (\(f :< t) -> 
              \(i :< p) ->  
              (f i) :< (fmap (fmap f) p <|> fmap (<*> C w) t))
 
      <*>
     
         pure ( \h :< s -> 
                \g :< r ->  
                (h . g) :< (fmap (fmap (h .)) r) <|> 
                            fmap (<*> (C v)) . (fmap (.)) s) <*> u) <*> v) <*> w


== { <*> is left associative } ==

  pure (.) <*>

    pure (.) <*>

      pure (.) <*>
   
        pure (\(f :< t) -> 
              \(i :< p) ->  
              (f i) :< (fmap (fmap f) p <|> fmap (<*> C w) t))
 
      <*>
     
         pure ( \h :< s -> 
                \g :< r ->  
                (h . g) :< (fmap (fmap (h .)) r) <|> 
                            fmap (<*> (C v)) . (fmap (.)) s) <*> u <*> v <*> w

==

!TODO!

==


  C $
  (pure (.)
   <*>
   pure (.)
    <*>
    (pure (.)
     <*>
     pure (.))
      <*>
      pure ( \(f :< t) -> 
             \(g :< r) ->  
              (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <*> 
              u
              <*> 
        pure ( \(h :< s) -> 
              \(i :< p)      ->  
              (h i) :< ((fmap (fmap h) p) <|> fmap (<*> C w) s)) <*> v) <*> w)




== 

    C $
   (pure (.)
    <*>
    ((pure (.)
     <*>
     pure (.)
      <*>
      pure ( \(f :< t) -> 
             \(g :< r) ->  
              (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <*> 
              u))
              <*> 
        pure ( \(h :< s) -> 
              \(i :< p)      ->  
              (h i) :< ((fmap (fmap h) p) <|> fmap (<*> C w) s)) <*> v) <*> w)



==


    C $
    (pure (.)
     <*>
     pure (.)
      <*>
      pure ( \(f :< t) -> 
             \(g :< r) ->  
              (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <*> 
              u
              <*> 
       (pure ( \(h :< s) -> 
              \(i :< p)      ->  
              (h i) :< ((fmap (fmap h) p) <|> fmap (<*> C w) s)) <*> v) <*> w)


== { composition law for w Applicative }

    C $
     (pure (.)
      <*>
      (pure ( \(f :< t) -> 
             \(g :< r) ->  
              (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <*> 
              u)
              <*> 
       (pure ( \(h :< s) -> 
              \(i :< p)      ->  
              (h i) :< ((fmap (fmap h) p) <|> fmap (<*> C w) s)) <*> v) <*> w)



== { composition law for w Applicative   } ==

    C $
      (pure ( \(f :< t) -> 
             \(g :< r) ->  
              (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <*> 
              u)
              <*> 
      ((pure ( \(h :< s) -> 
              \(i :< p)      ->  
              (h i) :< ((fmap (fmap h) p) <|> fmap (<*> C w) s)) <*> v) <*> w)


== { <*> is left associative } ==

    C $
      pure ( \(f :< t) -> 
             \(g :< r) ->  
              (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <*> 
              u 
              <*> 
      (pure ( \(h :< s) -> 
              \(i :< p)      ->  
              (h i) :< ((fmap (fmap h) p) <|> fmap (<*> C w) s)) <*> v <*> w)



== { (f <$>) == ((pure f) <*>) for w Applicative } ==

    C $
      ( \(f :< t) -> 
        \(g :< r) ->  
        (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <$> u 
              <*> 
      (( \(h :< s) -> 
         \(i :< p)      ->  
         (h i) :< ((fmap (fmap h) p) <|> fmap (<*> C w) s)) <$> v <*> w)

== { β-equivalence } ==

    C $
      ( \(f :< t) -> 
        \(g :< r) ->  
        (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <$> u 
              <*> 
      (( \(h :< s) -> 
         \(i :< p)      ->  
         let (b :< n) = (h i) :< (fmap (fmap h) p) in 
         b :< (n <|> fmap (<*> C w) s)) <$> v <*> w)


== { definition of bimap } ==

    C $
      ( \(f :< t) -> 
        \(g :< r) ->  
        (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <$> u 
              <*> 
      (( \(h :< s) -> 
         \(i :< p)      ->  
         let (b :< n) = bimap h (fmap h) (i :< p) in 
         b :< (n <|> fmap (<*> C w) s)) <$> v <*> w)


== { pattern matching against CofreeF } ==

    C $
      ( \(f :< t) -> 
        \(g :< r) ->  
        (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <$> u 
              <*> 
      (( \(h :< s) -> 
         \(a)      ->  
         let (b :< n) = bimap h (fmap h) a in 
         b :< (n <|> fmap (<*> C w) s)) <$> v <*> w)


== { α-conversion } 

    C $
      ( \(f :< t) -> 
        \(g :< r) ->  
        (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <$> u 
              <*> 
      (( \(f :< t) -> 
         \(a)      ->  
         let (b :< n) = bimap f (fmap f) a in 
         b :< (n <|> fmap (<*> C w) t)) <$> v <*> w)

== { definition of <*> } ==

    C $
      ( \(f :< t) -> 
        \(g :< r) ->  
        (f g) :< ((fmap (fmap f) r) <|> fmap (<*> (C v <*> C w))) t)
              <$> u 
              <*> unC (C v <*> C w)

== { β-equivalence } ==

    C $
      ( \(f :< t) -> 
        \(g :< r)      ->  
        let (b :< n) = (f g) :< (fmap (fmap f) r) in 
        b :< (n <|> fmap (<*> (C v <*> C w))) t)) <$> u <*> unC (C v <*> C w)

== { definition of bimap }

    C $
      ( \(f :< t) -> 
        \(g :< r)      ->  
        let (b :< n) = bimap f (fmap f) (g :< r) in 
        b :< (n <|> fmap (<*> (C v <*> C w))) t)) <$> u <*> unC (C v <*> C w)

== { pattern match on CofreeF } ==

    C $
      ( \(f :< t) -> 
        \(a)      ->  
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> (C v <*> C w))) t)) <$> u <*> unC (C v <*> C w)

== { definition of <*> } ==

   C u <*> (C v <*> C w)

## Homomorphism

  pure f <*> pure x

==

  C $
    ( \(f :< t) -> 
      \(a)      ->  
      let (b :< n) = bimap f (fmap f) a in 
      b :< (n <|> fmap (<*> pure x) t)) <$> (pure $ f :< empty) <*> (pure $ x :< empty)

== { homomorphism for w, twice } ==

  C $ pure $
      let (b :< n) = bimap f (fmap f) (x :< empty) in 
      b :< (n <|> fmap (<*> pure x) empty)) 

== { bimap } ==

  C $ pure $
      let (b :< n) = (f x :< (fmap f empty)) in 
      b :< (n <|> fmap (<*> pure x) empty)) 

== { empty invariant under fmap } ==
  
  C $ pure $ (f x) :< (empty <|> empty) 

== { definition } ==

  pure (f x)

## Interchange

   u <*> pure y

==

   C $     
     ( \(f :< t) ->
       \(a)      ->                                 
       let (b :< n) = bimap f (fmap f) a in
       b :< (n <|> fmap (<*> (pure y)) t)) <$> u <*> (pure (y :< empty))

== { interchange for w } ==

   C $
      pure ($ y :< empty) <*>
      (pure
        ( \(f :< t) ->
          \(a)      ->                                 
          let (b :< n) = bimap f (fmap f) a in
          b :< (n <|> fmap (<*> (pure y)) t))) <*> u)

== { composition } ==

   C $
      pure (.) <*>
      pure ($ y :< empty) <*>
      pure
         ( \(f :< t) ->
           \(a)      ->                                 
           let (b :< n) = bimap f (fmap f) a in
           b :< (n <|> fmap (<*> (pure y)) t))

        <*> u)

== { homomorphism } ==

   C $
      pure (($ y :< empty) .) <*>
      pure
         ( \(f :< t) ->
           \(a)      ->                                 
           let (b :< n) = bimap f (fmap f) a in
           b :< (n <|> fmap (<*> (pure y)) t))

        <*> u)

== { homomorphism } ==

   C $
      pure (($ y :< empty) . 
         ( \(f :< t) ->
           \(a)      ->                                 
           let (b :< n) = bimap f (fmap f) a in
           b :< (n <|> fmap (<*> (pure y)) t))
        <*> u)

== { β-reduction } ==

   C $
      pure (
         ( \(f :< t) ->
           let (b :< n) = bimap f (fmap f) (y :< empty) in
           b :< (n <|> fmap (<*> (pure y)) t))
        <*> u)

== { bimap, β-reduction } == 

   C $
      pure (
         ( \(f :< t) -> f y :< (empty <|> fmap (<*> (pure y)) t))
        <*> u)

== { fmap } ==

   C $ (\(f :< t) -> f y :< (fmap (<*> pure y) t)) <$> u   

== { coinduction (consume 1, produce 1) } ==
   
   C $ (\(f :< t) -> f y :< (fmap ($ y) t)) <$> u
   
== { def. $ }

   C $ (\(f :< t) -> ($ y) f :< (fmap ($ y) t)) <$> u

== { def. bimap }

    C $ bimap ($ y) (fmap ($ y)) <$> u

== { β,η-expansion } ==

    C $     
     ( 
       \(a)      ->                                 
       let (b :< n) = bimap ($ y) (fmap ($ y)) a in
       b :< n) <$> u

== { empty inviariant under fmap } ==

    C $     
     ( 
       \(a)      ->                                 
       let (b :< n) = bimap ($ y) (fmap ($ y)) a in
       b :< (n <|> fmap (<*> u) empty)) <$> u

== { fmap over pure } 

   C $     
     ( \(f :< t) ->
       \(a)      ->                                 
       let (b :< n) = bimap f (fmap f) a in
       b :< (n <|> fmap (<*> u) t)) <$> (pure (($ y) :< empty)) <*> u

== { definition }

pure ($ y) <*> u


# Definition equivalence for monads

 If w is also a monad, then (<*>) equals (`ap`)
 
 The proof uses coinduction for the case “produce one, consume one”.
 
 For simplicity, name "C" and "unC" for CofreeT and runCofreeT.
  
 Remark: If g = (\f -> (CofreeT wa) >>= (\a -> return $ f a)), then
 (`ap` a) == (>>= g)
  
  (C wf) `ap` (C wa)
  
  == {definition} ==
  
  (C wf) >>= (\f -> (C wa) >>= (\a -> f a))
  
  == {definition} ==
  
                                    wf >>= \(f :< t) ->
   unC (C wa >>= (\a -> return $ f a)) >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (>>= g) t)
  
  == {coinductive step} ==
  
                                    wf >>= \(f :< t) ->
   unC (C wa >>= (\a -> return $ f a)) >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (<*> C wa) t)
  == {definition of fmap for monads}
  
  
                                    wf >>= \(f :< t) ->
                   unC (fmap f (C wa)) >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (<*> C wa) t)
  
  == {definition of fmap for C} ==
  
                                              wf >>= \(f :< t) ->
                      fmap (bimap f (fmap f)) wa >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (<*> C wa) t)
        
  == {definition of fmap for monads} ==
  
                                              wf >>= \(f :< t) ->
     (wa >>= (\a -> return (bimap f (fmap f) a)  >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (<*> C wa) t)
  
  == { associativity of monads } ==
  
                                    wf >>= \(f :< t) ->
                                    wa >>= \a        ->
         (return (bimap f (fmap f a))) >>= \(b :< n) -> 
                            return $ b :< (n <|> fmap (<*> a) m)
  
  == { Left identity of monads } ==
  
                                    wf >>= \(f :< t) ->
                                    wa >>= \(a       ->
                            let b :< n = bimap f (fmap f a)) in
                            return $ b :< (n <|> fmap (<*> a) m))
  
  == { Equivalence of (>>=) and (<*>) for monad w.
  
                                           \(f :< t) ->
                                           \(a       ->
                            let b :< n = bimap f (fmap f a)) in
                            return $ b :< (n <|> fmap (<*> a) m)))
  
  == { definition of (<*>) } ==
  
  (Cofree wf) <*> (CofreeT wa)
  

