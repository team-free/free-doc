APPLICATIVE INSTANCE FOR COFREE TRANSFORMER

If the underlying functor f is an instance of Alternative, then CofreeT is also an
applicative functor.

Note that the only required properties of Alternative are associativity and
identity element, so one could also use functors that are instances of Plus
(semigroupoid package).

> instance (Alternative f, Monad w) => Monad (CofreeT f w) where
>   return = CofreeT . return . (:< empty)
>   (CofreeT cx) >>= f = CofreeT $ do
>     (a :< m) <- cx
>     (b :< n) <- runCofreeT $ f a
>     return $ b :< (n <|> fmap (>>= f) m)
> 
> instance (Alternative f, Applicative w) =>
>          Applicative (CofreeT f w) where
>   pure = CofreeT . pure . (:< empty)
>   
>   (CofreeT wf) <*> aa@(CofreeT wa) = CofreeT $
>     ( \(f :< t) -> 
>       \(a)      ->  
>       let (b :< n) = bimap f (fmap f) a in 
>       b :< (n <|> fmap (<*> aa) t)) <$> wf <*> wa


    C $
      ( \(f :< t) -> 
        \(a)      ->  
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> aa) t)) <$> wf <*> wa


## Identity

  pure id <*> (C wa)

==

   C $
     ( \(f :< t) -> 
       \(a)      ->  
       let (b :< n) = bimap f (fmap f) a in 
       b :< (n <|> fmap (<*> C wa) t)) <$> (pure $ id :< empty) <*> wa

== { w is Applicative } ==
  
  C $
       \(a)      ->  
       let (b :< n) = bimap id (fmap id) a in 
       b :< (n <|> fmap (<*> C wa) empty)) <$> wa

== { functor preserves identity } ==

  C $
       \(a)      ->  
       let (b :< n) = bimap id id a in 
       b :< (n <|> fmap (<*> C wa) empty)) <$> wa

== { bifunctors preserve identity } ==

  C $
       \(a)      ->  
       let (b :< n) = a in 
       b :< (n <|> fmap (<*> C wa) empty)) <$> wa

== { empty is invariant under fmap } == 
 
  C $
       \(a)      ->  
       let (b :< n) = a in 
       b :< (n <|> empty) <$> wa

== 

  C $ id <$> wa

== { functor preserves identity }

  C wa

---


## Composition

   pure (.) <*> C u <*> C v <*> C w

==
    (C $
      ( \(f :< t) -> 
        \(a)      ->  
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> (C u)) t)) <$> pure (.) <*> C u) <*> C v <*> C w

==

!TODO!

==

    C $
      ( \(f :< t) -> 
        \(a)      ->  
        let (b :< n) = bimap f (fmap f) a in 
        b :< (n <|> fmap (<*> (C v)) t)) <$> u <*> (unC $ C v <*> C w)

==

   C u <*> (C v <*> C w)

## Homomorphism

  pure f <*> pure x

==

  C $
    ( \(f :< t) -> 
      \(a)      ->  
      let (b :< n) = bimap f (fmap f) a in 
      b :< (n <|> fmap (<*> pure x) t)) <$> (pure $ f :< empty) <*> (pure $ x :< empty)

== { homomorphism for w, twice } ==

  C $ pure $
      let (b :< n) = bimap f (fmap f) (x :< empty) in 
      b :< (n <|> fmap (<*> pure x) empty)) 

== { bimap } ==

  C $ pure $
      let (b :< n) = (f x :< (fmap f empty)) in 
      b :< (n <|> fmap (<*> pure x) empty)) 

== { empty invariant under fmap } ==
  
  C $ pure $ (f x) :< (empty <|> empty) 

== { definition } ==

  pure (f x)

## Interchange

   u <*> pure y

==

   C $     
     ( \(f :< t) ->
       \(a)      ->                                 
       let (b :< n) = bimap f (fmap f) a in
       b :< (n <|> fmap (<*> (pure y)) t)) <$> u <*> (pure (y :< empty))

== { interchange for w } ==

   C $
      pure ($ y :< empty) <*>
      (pure
        ( \(f :< t) ->
          \(a)      ->                                 
          let (b :< n) = bimap f (fmap f) a in
          b :< (n <|> fmap (<*> (pure y)) t))) <*> u)

== { composition } ==

   C $
      pure (.) <*>
      pure ($ y :< empty) <*>
      pure
         ( \(f :< t) ->
           \(a)      ->                                 
           let (b :< n) = bimap f (fmap f) a in
           b :< (n <|> fmap (<*> (pure y)) t))

        <*> u)

== { homomorphism } ==

   C $
      pure (($ y :< empty) .) <*>
      pure
         ( \(f :< t) ->
           \(a)      ->                                 
           let (b :< n) = bimap f (fmap f) a in
           b :< (n <|> fmap (<*> (pure y)) t))

        <*> u)

== { homomorphism } ==

   C $
      pure (($ y :< empty) . 
         ( \(f :< t) ->
           \(a)      ->                                 
           let (b :< n) = bimap f (fmap f) a in
           b :< (n <|> fmap (<*> (pure y)) t))
        <*> u)

== { β-reduction } ==

   C $
      pure (
         ( \(f :< t) ->
           let (b :< n) = bimap f (fmap f) (y :< empty) in
           b :< (n <|> fmap (<*> (pure y)) t))
        <*> u)

== { bimap, β-reduction } == 

   C $
      pure (
         ( \(f :< t) -> f y :< (empty <|> fmap (<*> (pure y)) t))
        <*> u)

== { fmap } ==

   C $ (\(f :< t) -> f y :< (fmap (<*> pure y) t)) <$> u   

== { coinduction (consume 1, produce 1) } ==
   
   C $ (\(f :< t) -> f y :< (fmap ($ y) t)) <$> u
   
== { def. $ }

   C $ (\(f :< t) -> ($ y) f :< (fmap ($ y) t)) <$> u

== { def. bimap }

    C $ bimap ($ y) (fmap ($ y)) <$> u

== { β,η-expansion } ==

    C $     
     ( 
       \(a)      ->                                 
       let (b :< n) = bimap ($ y) (fmap ($ y)) a in
       b :< n) <$> u

== { empty inviariant under fmap } ==

    C $     
     ( 
       \(a)      ->                                 
       let (b :< n) = bimap ($ y) (fmap ($ y)) a in
       b :< (n <|> fmap (<*> u) empty)) <$> u

== { fmap over pure } 

   C $     
     ( \(f :< t) ->
       \(a)      ->                                 
       let (b :< n) = bimap f (fmap f) a in
       b :< (n <|> fmap (<*> u) t)) <$> (pure (($ y) :< empty)) <*> u

== { definition }

pure ($ y) <*> u


# Definition equivalence for monads

 If w is also a monad, then (<*>) equals (`ap`)
 
 The proof uses coinduction for the case “produce one, consume one”.
 
 For simplicity, name "C" and "unC" for CofreeT and runCofreeT.
  
 Remark: If g = (\f -> (CofreeT wa) >>= (\a -> return $ f a)), then
 (`ap` a) == (>>= g)
  
  (C wf) `ap` (C wa)
  
  == {definition} ==
  
  (C wf) >>= (\f -> (C wa) >>= (\a -> f a))
  
  == {definition} ==
  
                                    wf >>= \(f :< t) ->
   unC (C wa >>= (\a -> return $ f a)) >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (>>= g) t)
  
  == {coinductive step} ==
  
                                    wf >>= \(f :< t) ->
   unC (C wa >>= (\a -> return $ f a)) >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (<*> C wa) t)
  == {definition of fmap for monads}
  
  
                                    wf >>= \(f :< t) ->
                   unC (fmap f (C wa)) >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (<*> C wa) t)
  
  == {definition of fmap for C} ==
  
                                              wf >>= \(f :< t) ->
                      fmap (bimap f (fmap f)) wa >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (<*> C wa) t)
        
  == {definition of fmap for monads} ==
  
                                              wf >>= \(f :< t) ->
     (wa >>= (\a -> return (bimap f (fmap f) a)  >>= \(b :< n) ->
                                return $ b :< (n <|> fmap (<*> C wa) t)
  
  == { associativity of monads } ==
  
                                    wf >>= \(f :< t) ->
                                    wa >>= \a        ->
         (return (bimap f (fmap f a))) >>= \(b :< n) -> 
                            return $ b :< (n <|> fmap (<*> a) m)
  
  == { Left identity of monads } ==
  
                                    wf >>= \(f :< t) ->
                                    wa >>= \(a       ->
                            let b :< n = bimap f (fmap f a)) in
                            return $ b :< (n <|> fmap (<*> a) m))
  
  == { Equivalence of (>>=) and (<*>) for monad w.
  
                                           \(f :< t) ->
                                           \(a       ->
                            let b :< n = bimap f (fmap f a)) in
                            return $ b :< (n <|> fmap (<*> a) m)))
  
  == { definition of (<*>) } ==
  
  (Cofree wf) <*> (CofreeT wa)
  

